name: Build Wheels

on:
  push:
    branches: [ main, corvin/c-bindings ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheel for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            artifact_name: aic-sdk-x86_64-unknown-linux-gnu
            lib_dir: linux
            lib_name: libaic.so
          - os: linux
            arch: aarch64
            runner: ubuntu-latest
            artifact_name: aic-sdk-aarch64-unknown-linux-gnu
            lib_dir: linux
            lib_name: libaic.so
          
          # macOS builds
          - os: macos
            arch: universal
            runner: macos-latest
            artifact_name: aic-sdk-macos-universal
            lib_dir: mac
            lib_name: libaic.dylib
          - os: macos
            arch: arm64
            runner: macos-latest
            artifact_name: aic-sdk-aarch64-apple-darwin
            lib_dir: mac
            lib_name: libaic.dylib
          
          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest
            artifact_name: aic-sdk-x86_64-pc-windows-msvc
            lib_dir: windows
            lib_name: aic.dll

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build hatchling

    - name: Extract version from pyproject.toml
      id: version
      shell: bash
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Install tomli for older Python versions
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      run: pip install tomli

    - name: Download C library artifact
      env:
        GITHUB_TOKEN: ${{ secrets.AIC_SDK_ACCESS_TOKEN }}
      shell: bash
      run: |
        # Create the target directory
        mkdir -p aic/libs/${{ matrix.lib_dir }}
        
        # Set variables
        REPO="ai-coustics/aic-sdk"
        TAG="${{ steps.version.outputs.version }}"
        
        # Determine asset name based on platform
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          ASSET="${{ matrix.artifact_name }}-$TAG.zip"
        else
          ASSET="${{ matrix.artifact_name }}-$TAG.tar.gz"
        fi
        
        echo "Downloading asset: $ASSET from release: $TAG"
        
        # 1 – get release JSON (includes assets)
        echo "Fetching release information..."
        release_json=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$REPO/releases/tags/$TAG")
        
        # Check if release exists
        if [[ $(echo "$release_json" | jq -r '.message // empty') == "Not Found" ]]; then
          echo "ERROR: Release $TAG not found in repository $REPO"
          echo "Available releases:"
          curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases" | \
            jq -r '.[] | .tag_name' | head -10
          exit 1
        fi
        
        # 2 – extract the asset_id
        echo "Looking for asset: $ASSET"
        asset_id=$(echo "$release_json" | jq -r --arg NAME "$ASSET" '
            .assets[] | select(.name==$NAME) | .id
        ')
        
        if [[ -z "$asset_id" || "$asset_id" == "null" ]]; then
          echo "ERROR: Asset '$ASSET' not found in release $TAG"
          echo "Available assets:"
          echo "$release_json" | jq -r '.assets[] | "  - \(.name) (\(.size) bytes)"'
          exit 1
        fi
        
        echo "Found asset ID: $asset_id"
        
        # 3 – download the file using the asset API
        echo "Downloading asset..."
        curl -L \
          -H "Accept: application/octet-stream" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          --fail --show-error \
          "https://api.github.com/repos/$REPO/releases/assets/$asset_id" \
          -o "$ASSET"
        
        echo "Downloaded file info:"
        ls -lh "$ASSET"
        file "$ASSET"
        
        # Extract based on file type
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          echo "Extracting ZIP archive..."
          unzip -l "$ASSET"
          unzip "$ASSET"
        else
          echo "Extracting TAR.GZ archive..."
          tar -tzf "$ASSET" | head -10
          tar -xzf "$ASSET"
        fi
        
        # Find and copy the library file
        echo "Looking for library file: ${{ matrix.lib_name }}"
        find . -name "${{ matrix.lib_name }}" -type f -ls
        
        FOUND_LIB=$(find . -name "${{ matrix.lib_name }}" -type f | head -1)
        if [[ -z "$FOUND_LIB" ]]; then
          echo "ERROR: Library file ${{ matrix.lib_name }} not found in extracted archive"
          echo "Archive contents:"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            unzip -l "$ASSET"
          else
            tar -tzf "$ASSET"
          fi
          exit 1
        fi
        
        echo "Copying library from: $FOUND_LIB"
        cp "$FOUND_LIB" "aic/libs/${{ matrix.lib_dir }}/"
        
        # Verify the library was copied
        echo "Contents of aic/libs/${{ matrix.lib_dir }}:"
        ls -la "aic/libs/${{ matrix.lib_dir }}/"
        
        if [ ! -f "aic/libs/${{ matrix.lib_dir }}/${{ matrix.lib_name }}" ]; then
          echo "ERROR: Library file ${{ matrix.lib_name }} not found in aic/libs/${{ matrix.lib_dir }}/"
          exit 1
        fi
        
        echo "✅ Successfully downloaded and extracted ${{ matrix.lib_name }}"

    - name: Set up QEMU for ARM64 builds
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build wheel (Linux ARM64)
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      uses: docker://quay.io/pypa/manylinux2014_aarch64
      with:
        args: |
          bash -c "
            cd /github/workspace &&
            /opt/python/cp311-cp311/bin/python -m pip install build hatchling &&
            /opt/python/cp311-cp311/bin/python -m build --wheel &&
            auditwheel repair dist/*.whl --plat-tag linux_aarch64 -w wheelhouse/
          "

    - name: Build wheel (Linux x86_64)
      if: matrix.os == 'linux' && matrix.arch == 'x86_64'
      uses: docker://quay.io/pypa/manylinux2014_x86_64
      with:
        args: |
          bash -c "
            cd /github/workspace &&
            /opt/python/cp311-cp311/bin/python -m pip install build hatchling &&
            /opt/python/cp311-cp311/bin/python -m build --wheel &&
            auditwheel repair dist/*.whl --plat-tag linux_x86_64 -w wheelhouse/
          "

    - name: Build wheel (macOS/Windows)
      if: matrix.os != 'linux'
      run: |
        python -m build --wheel
        mkdir -p wheelhouse
        cp dist/*.whl wheelhouse/

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: wheelhouse/*.whl
        retention-days: 30

  test-wheels:
    name: Test wheels
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to reduce CI time
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: wheelhouse/

    - name: Install wheel
      shell: bash
      run: |
        # Find the appropriate wheel for this platform
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          WHEEL=$(find wheelhouse -name "*linux*.whl" | head -1)
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          WHEEL=$(find wheelhouse -name "*macosx*.whl" -o -name "*universal*.whl" | head -1)
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          WHEEL=$(find wheelhouse -name "*win*.whl" | head -1)
        fi
        
        if [[ -n "$WHEEL" ]]; then
          echo "Installing wheel: $WHEEL"
          pip install "$WHEEL"
        else
          echo "No suitable wheel found for this platform"
          exit 1
        fi

    - name: Test import
      run: |
        python -c "import aic; print('Successfully imported aic')"
        python -c "from aic import Model, AicModelType; print('Import successful')"
