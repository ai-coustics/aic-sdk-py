name: Build & publish Linux wheels

on:
  push:
    branches: [ corvin/c-bindings ]
    tags: ["*.*.*"]        # build + publish when you tag a release
  workflow_dispatch:        # allow manual runs

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use one Python version for the host, cibuildwheel installs all needed CPythons
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up host Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.18.0 tomli

      # cibuildwheel will call this script once _per architecture_.
      - name: Build wheels with bundled SDK
        env:
          GH_TOKEN: ${{ secrets.AIC_SDK_ACCESS_TOKEN }}
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_SKIP: "cp36-* cp37-* cp38-* *-musllinux*"  # Skip old Python and musl
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD_LINUX: |
            set -euo pipefail
            
            echo "Starting before_build script..."
            echo "Current working directory: $(pwd)"
            echo "Environment - CIBW_ARCH: ${CIBW_ARCH:-NOT_SET}"
            
            # Clean up any previous SDK downloads and extracted files
            rm -rf sdk.tar.gz lib/ include/ aic/libs/linux/*.so || true
            
            # Install required tools
            pip install tomli
            
            # Install GitHub CLI in the container
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /tmp/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/tmp/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            apt update
            apt install -y gh
            
            # Extract project version from pyproject.toml
            echo "Extracting version from pyproject.toml..."
            VERSION=$(python - <<'PY'
            import tomli, pathlib, sys
            print(tomli.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])
            PY
            )
            echo "Version: $VERSION"
            
            # Map cibuildwheel arch → SDK tarball arch string
            # Debug: Show all relevant environment variables
            echo "=== Environment Debug ==="
            echo "CIBW_ARCH: ${CIBW_ARCH:-NOT_SET}"
            echo "AUDITWHEEL_ARCH: ${AUDITWHEEL_ARCH:-NOT_SET}"
            echo "Python platform.machine(): $(python -c 'import platform; print(platform.machine())')"
            echo "Python platform.platform(): $(python -c 'import platform; print(platform.platform())')"
            echo "uname -m: $(uname -m)"
            echo "========================="
            
            # Try to determine architecture from multiple sources
            if [[ -n "${CIBW_ARCH:-}" ]]; then
                ARCH="$CIBW_ARCH"
                echo "Using CIBW_ARCH: $ARCH"
            elif [[ -n "${AUDITWHEEL_ARCH:-}" ]]; then
                ARCH="$AUDITWHEEL_ARCH"
                echo "Using AUDITWHEEL_ARCH: $ARCH"
            else
                # Fallback: try to detect from system
                ARCH=$(uname -m)
                echo "CIBW_ARCH not set, detected from uname: $ARCH"
            fi
            echo "Final ARCH=$ARCH"
            
            # Map architecture to SDK naming convention
            if [[ "$ARCH" == "aarch64" ]]; then
                SDK_ARCH="aarch64-unknown-linux-gnu"
            elif [[ "$ARCH" == "x86_64" ]]; then
                SDK_ARCH="x86_64-unknown-linux-gnu"
            else
                echo "Unsupported architecture: $ARCH"
                exit 1
            fi
            echo "Selected SDK_ARCH=$SDK_ARCH"
            TAR="aic-sdk-${SDK_ARCH}-${VERSION}-glibc2.31.tar.gz"

            echo "Downloading $TAR from private repo…"
            echo "Looking for release: $VERSION"
            echo "Available releases:"
            gh release list --repo ai-coustics/aic-sdk --limit 10 || echo "Failed to list releases"
            
            echo "Attempting download..."
            if ! gh release download --repo ai-coustics/aic-sdk "$VERSION" --pattern "$TAR" --output sdk.tar.gz --clobber; then
                echo "Failed to download release $VERSION with pattern $TAR"
                echo "Checking what assets are available for this release:"
                gh release view --repo ai-coustics/aic-sdk "$VERSION" || echo "Release $VERSION not found"
                exit 1
            fi
            tar -xzf sdk.tar.gz

            # Bundle the shared library into the package tree expected by the loader
            # Note: cibuildwheel runs this from a temporary copy of the project
            mkdir -p aic/libs/linux
            cp lib/libaic*.so aic/libs/linux/
            
            # Verify the files were copied and show file types
            echo "Copied shared library files:"
            ls -la aic/libs/linux/
            echo "File type and architecture:"
            file aic/libs/linux/*
            echo "ELF details:"
            readelf -h aic/libs/linux/*.so || echo "readelf failed"
            
            # Check what setuptools would include
            echo "Project structure before build:"
            find aic -name "*.so" -o -name "*.dylib" -o -name "*.dll"
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels
          path: wheelhouse/*.whl

#   publish-to-pypi:
#     needs: build-linux
#     if: startsWith(github.ref, 'refs/tags/')
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/download-artifact@v4
#         with:
#           name: linux-wheels
#           path: dist

#       - name: Publish wheels to PyPI
#         uses: pypa/gh-action-pypi-publish@v1.8.6
#         with:
#           user: __token__
#           password: ${{ secrets.PYPI_API_TOKEN }} 