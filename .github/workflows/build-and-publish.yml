name: Publish sdist & Create Release with Binaries

on:
  push:
    tags: ["*.*.*"]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: publish
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write          # for PyPI trusted publishing
      contents: write          # to create/update GitHub release
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build sdist only
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build --sdist
          echo "Built artifacts:" && ls -la dist/

      - name: Publish sdist to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

      - name: Determine version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          BASE_VERSION=$(echo "$VERSION" | sed -E 's/(.*)\.post[0-9]+/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Publishing release assets for version: $VERSION"

      - name: Validate pyproject version matches tag
        run: |
          FILE_VERSION=$(python - <<'PY'
          import tomllib, pathlib
          d = tomllib.loads(pathlib.Path('pyproject.toml').read_text('utf-8'))
          print(d['project']['version'])
          PY
          )
          if [ "$FILE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "WARNING: pyproject.toml version ($FILE_VERSION) does not match tag (${{ steps.version.outputs.version }})" >&2
          fi

      - name: Read SDK version from pyproject
        id: sdk
        run: |
          SDK_VERSION=$(python - <<'PY'
          import tomllib, pathlib
          d = tomllib.loads(pathlib.Path('pyproject.toml').read_text('utf-8'))
          print(d['tool']['aic-sdk']['sdk-version'])
          PY
          )
          echo "sdk_version=$SDK_VERSION" >> $GITHUB_OUTPUT

      - name: Extract latest changelog entry
        id: changelog
        run: |
          awk 'BEGIN{print_mode=0} /^## /{if (print_mode==1) exit; if (NR>1) print_mode=1} {if (print_mode==1) print}' CHANGELOG.md > RELEASE_BODY.md
          echo "Generated release body:" && echo "-----" && cat RELEASE_BODY.md && echo "-----"

      - name: Download platform SDK assets from private repo
        env:
          GH_TOKEN: ${{ secrets.AIC_SDK_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          VERSION='${{ steps.sdk.outputs.sdk_version }}'
          mkdir -p release-assets
          echo "Available releases in private repo (top 10):"
          gh release list --repo ai-coustics/aic-sdk --limit 10 || true

          # Define expected asset triplets
          arches=(
            "x86_64-unknown-linux-gnu"
            "aarch64-unknown-linux-gnu"
            "x86_64-apple-darwin"
            "aarch64-apple-darwin"
            "x86_64-pc-windows-msvc"
          )

          for arch in "${arches[@]}"; do
            if [[ "$arch" == *"windows"* ]]; then
              ext="zip"
            else
              ext="tar.gz"
            fi
            name="aic-sdk-${arch}-${VERSION}.${ext}"
            echo "Fetching $name from ai-coustics/aic-sdk@$VERSION"
            if ! gh release download --repo ai-coustics/aic-sdk "$VERSION" --pattern "$name" --output "release-assets/$name" --clobber; then
              echo "ERROR: Missing asset $name in private release $VERSION" >&2
              exit 1
            fi
          done

          echo "Downloaded assets:"
          ls -lh release-assets/

      - name: Create GitHub Release and upload binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: RELEASE_BODY.md
          files: |
            release-assets/*
          draft: false
          prerelease: false

