name: Build & publish Windows wheels

on:
  push:
    branches: [ corvin/c-bindings ]
    tags: ["*.*.*"]        # build + publish when you tag a release
  workflow_dispatch:        # allow manual runs

jobs:
  build-windows:
    environment: publish
    runs-on: windows-latest
    strategy:
      matrix:
        # Use one Python version for the host, cibuildwheel installs all needed CPythons
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up host Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.18.0 tomli

      # cibuildwheel will call this script once _per architecture_.
      - name: Build wheels with bundled SDK
        env:
          GH_TOKEN: ${{ secrets.AIC_SDK_ACCESS_TOKEN }}
          CIBW_ARCHS_WINDOWS: "AMD64"  # x86_64 only for now
          CIBW_SKIP: "cp36-* cp37-* cp38-*"  # Skip old Python versions
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT_PASSTHROUGH_WINDOWS: "GH_TOKEN"
          CIBW_BEFORE_BUILD_WINDOWS: >-
            powershell -Command "
            Write-Host 'Starting PowerShell before_build script...';
            Write-Host 'Current working directory:' (Get-Location);
            Write-Host 'Environment - CIBW_ARCH:' $env:CIBW_ARCH;
            
            # Clean up any previous SDK downloads and extracted files
            Remove-Item -Path 'sdk.zip' -Force -ErrorAction SilentlyContinue;
            Remove-Item -Path 'lib' -Recurse -Force -ErrorAction SilentlyContinue;
            Remove-Item -Path 'include' -Recurse -Force -ErrorAction SilentlyContinue;
            Remove-Item -Path 'aic/libs/windows/*.dll' -Force -ErrorAction SilentlyContinue;
            
            # Install required tools
            pip install tomli;
            
            # GitHub CLI is pre-installed on GitHub Actions runners
            Write-Host 'GitHub CLI version:';
            gh --version;
            
            # Debug: Check if GH_TOKEN is available
            Write-Host '=== Token Debug ===';
            if ($env:GH_TOKEN) {
                Write-Host 'GH_TOKEN is available (length:' $env:GH_TOKEN.Length ')';
            } else {
                Write-Host 'GH_TOKEN is NOT available';
                Write-Host 'Available environment variables containing GH or TOKEN:';
                Get-ChildItem env: | Where-Object { $_.Name -match 'GH|TOKEN' } | Format-Table -AutoSize;
            }
            Write-Host '===================';
            
            # Extract project version from pyproject.toml
            Write-Host 'Extracting version from pyproject.toml...';
            $VERSION = python -c \"import tomli, pathlib; print(tomli.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])\";
            Write-Host 'Version:' $VERSION;
            
            # Map cibuildwheel arch to SDK tarball arch string
            Write-Host '=== Environment Debug ===';
            Write-Host 'CIBW_ARCH:' $env:CIBW_ARCH;
            Write-Host 'PROCESSOR_ARCHITECTURE:' $env:PROCESSOR_ARCHITECTURE;
            $PYTHON_ARCH = python -c \"import platform; print(platform.machine())\";
            Write-Host 'Python platform.machine():' $PYTHON_ARCH;
            Write-Host '==========================';
            
            # Try to determine architecture from multiple sources
            if ($env:CIBW_ARCH) {
                $ARCH = $env:CIBW_ARCH;
                Write-Host 'Using CIBW_ARCH:' $ARCH;
            } else {
                $ARCH = 'AMD64';
                Write-Host 'CIBW_ARCH not set, defaulting to:' $ARCH;
            }
            Write-Host 'Final ARCH:' $ARCH;
            
            # Map architecture to SDK naming convention
            if ($ARCH -eq 'AMD64') {
                $SDK_ARCH = 'x86_64-pc-windows-msvc';
            } else {
                Write-Host 'Unsupported architecture:' $ARCH;
                exit 1;
            }
            Write-Host 'Selected SDK_ARCH:' $SDK_ARCH;
            $ZIP_FILE = \"aic-sdk-$SDK_ARCH-$VERSION.zip\";

            Write-Host 'Downloading' $ZIP_FILE 'from private repo...';
            Write-Host 'Looking for release:' $VERSION;
            Write-Host 'Available releases:';
            gh release list --repo ai-coustics/aic-sdk --limit 10;
            
            Write-Host 'Attempting download...';
            gh release download --repo ai-coustics/aic-sdk $VERSION --pattern $ZIP_FILE --output sdk.zip --clobber;
            if ($LASTEXITCODE -ne 0) {
                Write-Host 'Failed to download release' $VERSION 'with pattern' $ZIP_FILE;
                Write-Host 'Checking what assets are available for this release:';
                gh release view --repo ai-coustics/aic-sdk $VERSION;
                exit 1;
            }
            
            # Verify download succeeded
            if (Test-Path 'sdk.zip') {
                $fileSize = (Get-Item 'sdk.zip').Length;
                Write-Host 'Download successful. File size:' $fileSize 'bytes';
            } else {
                Write-Host 'ERROR: sdk.zip not found after download!';
                exit 1;
            }
            
            # Extract the ZIP file
            Write-Host 'Extracting SDK...';
            Expand-Archive -Path 'sdk.zip' -DestinationPath '.' -Force;
            
            # Verify extraction
            Write-Host 'Contents after extraction:';
            if (Test-Path 'lib') {
                Write-Host 'lib directory found:';
                Get-ChildItem 'lib' | Format-Table -AutoSize;
            } else {
                Write-Host 'ERROR: lib directory not found after extraction!';
                Write-Host 'Current directory contents:';
                Get-ChildItem '.' | Format-Table -AutoSize;
                exit 1;
            }

            # Bundle the DLL into the package tree expected by the loader
            Write-Host 'Bundling DLL into package tree...';
            New-Item -ItemType Directory -Path 'aic/libs/windows' -Force | Out-Null;
            
            # Check what DLL files are available to copy
            Write-Host 'Available DLL files in lib directory:';
            $dllFiles = Get-ChildItem 'lib/*.dll' -ErrorAction SilentlyContinue;
            if ($dllFiles) {
                $dllFiles | Format-Table -AutoSize;
                Copy-Item 'lib/*.dll' 'aic/libs/windows/' -Force;
                Write-Host 'DLL files copied successfully';
            } else {
                Write-Host 'ERROR: No DLL files found in lib directory!';
                Write-Host 'Contents of lib directory:';
                Get-ChildItem 'lib' | Format-Table -AutoSize;
                exit 1;
            }
            
            # Verify the files were copied and show file types
            Write-Host 'Successfully copied DLL files:';
            $copiedDlls = Get-ChildItem 'aic/libs/windows/*.dll';
            $copiedDlls | ForEach-Object { Write-Host $_.Name ':' $_.Length 'bytes' };
            
            Write-Host 'Project structure before build:';
            Get-ChildItem 'aic/libs' -Recurse -Include '*.dll','*.dylib','*.so' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName };
            "
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels
          path: wheelhouse/*.whl

#   publish-to-pypi:
#     needs: build-windows
#     if: startsWith(github.ref, 'refs/tags/')
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/download-artifact@v4
#         with:
#           name: windows-wheels
#           path: dist

#       - name: Publish wheels to PyPI
#         uses: pypa/gh-action-pypi-publish@v1.8.6
#         with:
#           user: __token__
#           password: ${{ secrets.PYPI_API_TOKEN }} 