# .github/workflows/build-and-release-wheels.yml
name: Build & publish Python wheels

on:
  push:
    branches: [ corvin/c-bindings ]
    tags: [ 'v*.*.*' ]        # e.g. v0.5.3
  workflow_dispatch:          # manual trigger

env:
  SDK_REPO: ai-coustics/aic-sdk
  GH_TOKEN: ${{ secrets.AIC_SDK_ACCESS_TOKEN }}   # used by gh CLI

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (helper scripts only)
        uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install build tooling
        run: pip install --upgrade cibuildwheel==2.19 hatchling tomli jq

      # ---------- figure out which manylinux_2_31 tag really exists ----------
      - name: Resolve manylinux tags (Linux only)
        if: matrix.os == 'ubuntu-latest'
        id: ml
        shell: bash
        run: |
          set -euo pipefail
          latest_tag() {
            curl -s "https://quay.io/api/v1/repository/pypa/$1/tag/?onlyActive=true&limit=1" \
              | jq -r '.tags[0].name'
          }
          echo "x86=$(latest_tag manylinux_2_31_x86_64)"   >>"$GITHUB_OUTPUT"
          echo "arm=$(latest_tag manylinux_2_31_aarch64)"  >>"$GITHUB_OUTPUT"

      # ---------- fetch & unpack the platform SDK archive --------------------
      - name: Fetch platform SDK
        shell: bash
        run: |
          set -euo pipefail
          VER=$(python -c 'import tomllib, pathlib, sys; print(tomllib.loads(pathlib.Path("pyproject.toml").read_text())["project"]["version"])')
          case "${{ runner.os }}" in
            Linux)
              for TGT in x86_64 aarch64; do
                ASSET="aic-sdk-${TGT}-unknown-linux-gnu-${VER}-glibc2.31.tar.gz"
                gh release download --repo $SDK_REPO --pattern "$ASSET"
                mkdir -p aic/libs/linux/$TGT
                tar -xzf "$ASSET" -C aic/libs/linux/$TGT --strip-components=1
              done ;;
            macOS)
              gh release download --repo $SDK_REPO --pattern "aic-sdk-macos-universal-${VER}.tar.gz"
              mkdir -p aic/libs/mac
              tar -xzf aic-sdk-macos-universal-${VER}.tar.gz -C aic/libs/mac --strip-components=1 ;;
            Windows)
              gh release download --repo $SDK_REPO --pattern "aic-sdk-x86_64-pc-windows-msvc-${VER}.zip"
              mkdir -p aic/libs/windows
              tar -xf aic-sdk-x86_64-pc-windows-msvc-${VER}.zip -C aic/libs/windows ;;
          esac

      # ---------- build wheels ----------------------------------------------
      - name: Build wheels with cibuildwheel
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "pp* *_musllinux*"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ARCHS_WINDOWS: "AMD64"
          # use the freshly-resolved tags
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ steps.ml.outputs.x86 }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ steps.ml.outputs.arm }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with: { path: dist }
      - uses: softprops/action-gh-release@v2
        with: { files: dist/**/*.whl }